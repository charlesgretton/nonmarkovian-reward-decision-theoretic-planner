// Copyright (C) 2002, 2003
// Charles Gretton and David Price
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

/*
 * \paragraph{:Purpose:}
 *
 * Module which supports Phase I of the annotated expansion
 * algorithm. Presently atoms are a set of reward
 * specifications. These are generated by annotated expansion.
 *
 **/

#ifndef PHASEI
#define PHASEI

#include"formulaUtilities.h++"

namespace MDP
{
    class PhaseI
    {
    public:
        /*Calculate the atoms.*/
        virtual RewardSpecification* operator()(const explicitDomainSpecification&)const = 0;
    };

    /*The following class is used to generate the basis for the atoms
     *set. It takes an explicit domain specification and generates a
     *reward specification \member{atoms} which includes both the
     *domain reward formulae and their subformulae. The indexing of
     *this new mapping is a string representation of the desired
     *reward. The justification for this is to make indexing related
     *reward fairly simple.
     **/
    class Subformulas : public PhaseI
    {
    public:
        /*Call to function encapsulated by this class.*/
        RewardSpecification* operator()(const explicitDomainSpecification&)const;
    };

    class Minimal : public PhaseI
    {
    public:
        RewardSpecification* operator()(const explicitDomainSpecification&)const;
    };
}

#endif
